# PyWAF Docker Compose Configuration
# Complete deployment stack with Redis and monitoring

version: '3.8'

services:
  # PyWAF main application
  pywaf:
    build: .
    image: pywaf:latest
    container_name: pywaf
    restart: unless-stopped
    ports:
      - "8080:8080"   # Main HTTP port
      - "8443:8443"   # HTTPS port
      - "8081:8081"   # Admin API port
      - "9090:9090"   # Metrics port
    environment:
      - PYWAF_ENVIRONMENT=production
      - PYWAF_SERVER__HOST=0.0.0.0
      - PYWAF_PROXY__CACHE__REDIS_URL=redis://redis:6379/1
    volumes:
      - ./config:/app/config:ro
      - ./certs:/app/certs
      - ./logs:/app/logs
    depends_on:
      - redis
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - pywaf-network

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: pywaf-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pywaf-network

  # Example backend application
  backend:
    image: nginx:alpine
    container_name: pywaf-backend
    restart: unless-stopped
    ports:
      - "8081:80"
    volumes:
      - ./examples/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./examples/html:/usr/share/nginx/html:ro
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pywaf-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: pywaf-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    depends_on:
      - pywaf
    networks:
      - pywaf-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: pywaf-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - pywaf-network

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  pywaf-network:
    driver: bridge
