[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pywaf-proxy"
version = "1.0.0"
description = "Complete Python implementation of WAF + Reverse Proxy by Deepskilling"
authors = [
    {name = "Deepskilling", email = "support@deepskilling.com"}
]
maintainers = [
    {name = "Deepskilling", email = "support@deepskilling.com"}
]
readme = "README.md"
license = {text = "MIT"}
keywords = [
    "waf", "reverse-proxy", "security", "load-balancer", 
    "ssl-termination", "rate-limiting", "ddos-protection"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9", 
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: Proxy Servers",
    "Topic :: Security",
    "Topic :: System :: Networking :: Monitoring",
    "Operating System :: OS Independent",
]
requires-python = ">=3.8"
dependencies = [
    # Web framework and ASGI
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # HTTP client and server
    "httpx>=0.25.0",
    "aiohttp>=3.8.0",
    "requests>=2.31.0",
    
    # Async and concurrency
    "asyncio-throttle>=1.0.0",
    "aiofiles>=23.0.0",
    
    # Security and cryptography
    "cryptography>=41.0.0",
    "PyJWT>=2.8.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # SSL/TLS and certificates
    "certbot>=2.7.0",
    "acme>=2.7.0",
    
    # Database and caching
    "redis>=5.0.0",
    "aioredis>=2.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    
    # Configuration and validation
    "pydantic>=2.4.0",
    "pydantic-settings>=2.0.0",
    "PyYAML>=6.0.1",
    
    # Monitoring and logging
    "prometheus-client>=0.17.0",
    "structlog>=23.1.0",
    "rich>=13.5.0",
    
    # Network and IP handling  
    "ipaddress>=1.0.23;python_version<'3.3'",
    "netaddr>=0.10.0",
    
    # GeoIP and location
    "maxminddb>=2.2.0",
    "geoip2>=4.7.0",
    
    # Rate limiting
    "slowapi>=0.1.9",
    "limits>=3.6.0",
    
    # CLI and utilities
    "click>=8.1.0",
    "typer>=0.9.0",
    "python-dateutil>=2.8.0",
    
    # Testing and development
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.25.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
]

monitoring = [
    "grafana-api>=1.0.3",
    "prometheus-api-client>=0.5.3",
    "elasticsearch>=8.9.0",
]

performance = [
    "uvloop>=0.17.0;sys_platform!='win32'",
    "orjson>=3.9.0", 
    "cchardet>=2.1.7",
    "aiodns>=3.1.0",
]

all = [
    "pywaf-proxy[dev,monitoring,performance]"
]

[project.urls]
Homepage = "https://github.com/deepskilling/pywaf-proxy"
Documentation = "https://github.com/deepskilling/pywaf-proxy/docs"
Repository = "https://github.com/deepskilling/pywaf-proxy"
"Bug Tracker" = "https://github.com/deepskilling/pywaf-proxy/issues"

[project.scripts]
pywaf = "pywaf.cli:main"
pywaf-proxy = "pywaf.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["pywaf*"]

[tool.setuptools.package-data]
pywaf = [
    "templates/*.yaml",
    "templates/*.json", 
    "static/*",
    "schemas/*.json",
]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["pywaf"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = "-v --tb=short --strict-markers"
markers = [
    "unit: Unit tests",
    "integration: Integration tests", 
    "performance: Performance tests",
    "security: Security tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["pywaf"]
omit = [
    "*/tests/*",
    "*/test_*", 
    "setup.py",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
