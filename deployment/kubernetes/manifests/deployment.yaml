apiVersion: apps/v1
kind: Deployment
metadata:
  name: waf-reverse-proxy
  namespace: waf-proxy
  labels:
    app: waf-reverse-proxy
    version: "1.0.0"
    component: security
    provider: deepskilling
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: waf-reverse-proxy
  template:
    metadata:
      labels:
        app: waf-reverse-proxy
        version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: waf-reverse-proxy
        image: deepskilling/waf-reverse-proxy:latest
        imagePullPolicy: Always
        ports:
        - name: proxy
          containerPort: 8080
          protocol: TCP
        - name: admin
          containerPort: 8081
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: RUST_LOG
          value: "info"
        - name: CONFIG_FILE
          value: "/app/config.yaml"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /app/config.yaml
          subPath: config.yaml
          readOnly: true
        - name: logs
          mountPath: /var/log/waf-proxy
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      volumes:
      - name: config
        configMap:
          name: waf-proxy-config
      - name: logs
        emptyDir: {}
      securityContext:
        fsGroup: 1000
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: waf-reverse-proxy-service
  namespace: waf-proxy
  labels:
    app: waf-reverse-proxy
    provider: deepskilling
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  selector:
    app: waf-reverse-proxy
  ports:
  - name: proxy
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: admin
    port: 8081
    targetPort: 8081
    protocol: TCP
  sessionAffinity: ClientIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: waf-proxy-config
  namespace: waf-proxy
  labels:
    app: waf-reverse-proxy
    provider: deepskilling
data:
  config.yaml: |
    server:
      host: "0.0.0.0"
      port: 8080
      workers: 4
      max_connections: 1000
      keep_alive: 60

    admin:
      host: "0.0.0.0"
      port: 8081
      enabled: true

    waf:
      enabled: true
      owasp_protection:
        enabled: true
        sql_injection: true
        xss_protection: true
        rce_protection: true
        path_traversal: true
        csrf_protection: true

      rate_limiting:
        enabled: true
        global_limit: 1000
        per_ip_limit: 100
        burst_size: 50

      bot_protection:
        enabled: true
        challenge_failed_requests: true
        block_known_bad_bots: true

    proxy:
      upstreams:
        backend:
          servers:
            - url: "http://backend-service:3000"
              weight: 1
              max_fails: 3
              fail_timeout: "30s"
          load_balancer: "round_robin"
          health_check:
            enabled: true
            path: "/health"
            interval: "10s"
            timeout: "5s"

    logging:
      level: "info"
      access_log: "/var/log/waf-proxy/access.log"
      security_log: "/var/log/waf-proxy/security.log"
      format: "json"

    metrics:
      enabled: true
      port: 9090
      path: "/metrics"
