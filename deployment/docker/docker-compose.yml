version: '3.8'

services:
  waf-proxy:
    build: .
    container_name: waf-reverse-proxy
    restart: unless-stopped
    ports:
      - "8080:8080"  # Main proxy port
      - "8081:8081"  # Admin API port
      - "9090:9090"  # Metrics port
    volumes:
      - ./config.yaml:/app/config/config.yaml:ro
      - ./logs:/app/logs
      - ./ssl:/app/ssl:ro
    environment:
      - RUST_LOG=info
      - CONFIG_PATH=/app/config/config.yaml
    depends_on:
      - redis
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - waf-network

  redis:
    image: redis:7-alpine
    container_name: waf-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - waf-network

  prometheus:
    image: prom/prometheus:latest
    container_name: waf-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - waf-network

  grafana:
    image: grafana/grafana:latest
    container_name: waf-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - waf-network

  # Example backend service
  demo-backend:
    image: nginx:alpine
    container_name: demo-backend
    restart: unless-stopped
    ports:
      - "3001:80"
    volumes:
      - ./demo-content:/usr/share/nginx/html:ro
    networks:
      - waf-network

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  waf-network:
    driver: bridge
