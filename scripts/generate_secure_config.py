#!/usr/bin/env python3
"""
Secure Configuration Generator for WAF + Reverse Proxy

This script helps generate secure configuration values for both Rust and Python implementations.
"""

import secrets
import os
import sys
from pathlib import Path
from typing import Optional

def generate_jwt_secret(length: int = 32) -> str:
    """Generate a secure random JWT secret"""
    return secrets.token_hex(length)

def generate_password_hash(password: str) -> str:
    """Generate bcrypt hash for a password"""
    try:
        from passlib.context import CryptContext
        pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
        return pwd_context.hash(password)
    except ImportError:
        print("‚ùå Error: passlib not installed. Run: pip install 'passlib[bcrypt]'")
        sys.exit(1)

def prompt_password() -> str:
    """Securely prompt for password"""
    import getpass
    
    while True:
        password = getpass.getpass("Enter admin password: ")
        if len(password) < 8:
            print("‚ùå Password must be at least 8 characters long")
            continue
            
        confirm = getpass.getpass("Confirm password: ")
        if password != confirm:
            print("‚ùå Passwords do not match")
            continue
            
        return password

def create_secure_config_template(username: str, password_hash: str, jwt_secret: str) -> str:
    """Create secure configuration template"""
    return f"""# Secure Configuration Template
# Generated by generate_secure_config.py

# Admin API configuration
admin:
  enabled: true
  host: "127.0.0.1"  # Bind to localhost for security
  port: 8081
  
  # Authentication - SECURE VALUES
  auth_enabled: true
  username: "{username}"
  password_hash: "{password_hash}"
  
  # JWT settings - SECURE VALUES
  jwt_secret: "{jwt_secret}"
  jwt_expiry: 3600  # 1 hour

# Additional security recommendations:
# - Use environment variables for production: PYWAF_ADMIN_USERNAME, PYWAF_ADMIN_PASSWORD_HASH, PYWAF_JWT_SECRET
# - Rotate JWT secret regularly
# - Use strong passwords (12+ characters, mixed case, numbers, symbols)
# - Enable HTTPS in production
# - Restrict admin API access via firewall rules
"""

def create_env_template(username: str, password_hash: str, jwt_secret: str) -> str:
    """Create environment variable template"""
    return f"""# Environment Variables for Production Deployment
# Add these to your .env file (DO NOT commit to version control)

PYWAF_ADMIN_USERNAME="{username}"
PYWAF_ADMIN_PASSWORD_HASH="{password_hash}"
PYWAF_JWT_SECRET="{jwt_secret}"

# Optional additional security environment variables
# PYWAF_SSL_ENABLED=true
# PYWAF_SSL_CERT_FILE="/path/to/cert.pem"
# PYWAF_SSL_KEY_FILE="/path/to/key.pem"
"""

def main():
    print("üîí WAF + Reverse Proxy - Secure Configuration Generator")
    print("=" * 60)
    print()
    
    # Get username
    username = input("Enter admin username [admin]: ").strip()
    if not username:
        username = "admin"
    
    # Get password
    print("\nüîê Password Requirements:")
    print("- At least 8 characters long")
    print("- Use a strong, unique password")
    print("- Consider using a password manager")
    print()
    
    password = prompt_password()
    
    # Generate secure values
    print("\n‚öôÔ∏è  Generating secure configuration...")
    password_hash = generate_password_hash(password)
    jwt_secret = generate_jwt_secret()
    
    # Create templates
    config_template = create_secure_config_template(username, password_hash, jwt_secret)
    env_template = create_env_template(username, password_hash, jwt_secret)
    
    # Save to files
    config_file = Path("secure_config.yaml")
    env_file = Path(".env.template")
    
    config_file.write_text(config_template)
    env_file.write_text(env_template)
    
    print("‚úÖ Secure configuration generated!")
    print()
    print(f"üìÑ Configuration template saved to: {config_file}")
    print(f"üìÑ Environment template saved to: {env_file}")
    print()
    print("üõ°Ô∏è  Security Instructions:")
    print("1. Review the generated configuration templates")
    print("2. Copy values to your actual configuration files")
    print("3. For production, use environment variables from .env.template")
    print("4. NEVER commit .env files or password hashes to version control")
    print("5. Add .env to your .gitignore file")
    print()
    print("üìã Configuration Summary:")
    print(f"   Username: {username}")
    print(f"   Password Hash: {password_hash[:20]}...")
    print(f"   JWT Secret: {jwt_secret[:16]}...")
    print()
    print("üîß CLI Usage:")
    print("   # Test password hash:")
    print("   python -m pywaf.cli hash-password")
    print()
    print("   # Start with new config:")
    print("   python -m pywaf.main --config secure_config.yaml")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Configuration generation cancelled")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        sys.exit(1)
